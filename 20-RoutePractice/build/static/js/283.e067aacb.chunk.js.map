{"version":3,"file":"static/js/283.e067aacb.chunk.js","mappings":"6LACA,EAA2B,gC,iBCa3B,EAXsB,WACpB,OACEA,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAiBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sBACHC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACJ,UAAU,MAAMK,GAAG,aAAYH,SAAC,kBAK5C,E,SCXA,EAAuB,wBCkBvB,EAhBkB,SAACI,GACjB,OACEP,EAAAA,EAAAA,MAAA,MAAIC,UAAWC,EAAaC,SAAA,EAC1BH,EAAAA,EAAAA,MAAA,UAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,cAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAII,EAAMC,UAEZJ,EAAAA,EAAAA,KAAA,cAAAD,SAAaI,EAAME,aAErBL,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACJ,UAAU,MAAMK,GAAE,WAAAI,OAAaH,EAAMI,IAAKR,SAAC,sBAKvD,EChBA,EAAuB,wBAAvB,EAAyD,2BCiDzD,EA5CkB,SAACI,GACjB,IAGoBK,EAAQC,EAHtBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAaXC,EAA0C,QAD5B,IAAIC,gBAAgBH,EAASI,QACjBC,IAAI,QAE9BC,GAbcV,EAaYL,EAAMK,OAbVC,EAakBK,EAZrCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOb,GAAKc,EAAOd,GAAK,GAAK,EAE7Ba,EAAOb,GAAKc,EAAOd,GAAK,GAAK,CAExC,KAYF,OACEX,EAAAA,EAAAA,MAAC0B,EAAAA,SAAQ,CAAAvB,SAAA,EACPC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAgBC,UAC9BH,EAAAA,EAAAA,MAAA,UAAQ2B,QAPO,WACnBb,EAASI,EAAc,oBAAsB,mBAC/C,EAKoCf,SAAA,CAAC,QACvBe,EAAc,YAAc,kBAGtCd,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAaC,SACzBmB,EAAaM,KAAI,SAACC,GAAK,OACtBzB,EAAAA,EAAAA,KAAC0B,EAAS,CAERnB,GAAIkB,EAAMlB,GACVF,OAAQoB,EAAMpB,OACdD,KAAMqB,EAAMrB,MAHPqB,EAAMlB,GAIX,QAKZ,E,kBCMA,EA7BkB,WAChB,IAAAoB,GAKIC,EAAAA,EAAAA,GAAQC,EAAAA,IAAc,GAJxBC,EAAWH,EAAXG,YACMC,EAAYJ,EAAlBK,KACAC,EAAMN,EAANM,OACAC,EAAKP,EAALO,MAMF,OAJAC,EAAAA,EAAAA,YAAU,WACRL,GACF,GAAG,CAACA,IAEW,YAAXG,GAEAjC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,WAAUE,UACvBC,EAAAA,EAAAA,KAACoC,EAAAA,EAAc,MAKjBF,GACKlC,EAAAA,EAAAA,KAAA,KAAAD,SAAImC,IAGE,cAAXD,GAA4BF,GAAwC,IAAxBA,EAAaM,QAItDrC,EAAAA,EAAAA,KAACsC,EAAS,CAAC9B,OAAQuB,KAHjB/B,EAAAA,EAAAA,KAACuC,EAAa,GAIzB,C","sources":["webpack://20-routepractice/./src/components/quotes/NoQuotesFound.module.css?2c4b","components/quotes/NoQuotesFound.js","webpack://20-routepractice/./src/components/quotes/QuoteItem.module.css?127c","components/quotes/QuoteItem.js","webpack://20-routepractice/./src/components/quotes/QuoteList.module.css?9d5d","components/quotes/QuoteList.js","pages/AllQuotes.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"noquotes\":\"NoQuotesFound_noquotes__EUQsM\"};","import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className=\"btn\" to=\"/new-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"QuoteItem_item__Q6KwW\"};","import classes from \"./QuoteItem.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className=\"btn\" to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"QuoteList_list__MLz6k\",\"sorting\":\"QuoteList_sorting__GDrEn\"};","import { Fragment } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst QuoteList = (props) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const sortQuotes = (quotes, ascending) => {\n    return quotes.sort((quoteA, quoteB) => {\n      if (ascending) {\n        return quoteA.id > quoteB.id ? 1 : -1;\n      } else {\n        return quoteA.id < quoteB.id ? 1 : -1;\n      }\n    });\n  };\n\n  const queryParams = new URLSearchParams(location.search);\n  const isAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const sortedQuotes = sortQuotes(props.quotes, isAscending);\n\n  const clickHandler = () => {\n    navigate(isAscending ? \"/quotes?sort=desc\" : \"/quotes?sort=asc\");\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={clickHandler}>\n          Sort {isAscending ? \"Decending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { useEffect } from \"react\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../libs/api\";\n\n// const DUMMY_QUOTES = [\n//   {\n//     id: \"q1\",\n//     author: \"Bhautik\",\n//     text: \"Learning React is Fun!\",\n//   },\n//   {\n//     id: \"q2\",\n//     author: \"Bhautik Jani\",\n//     text: \"Learning React is Awesome!\",\n//   },\n//   {\n//     id: \"q3\",\n//     author: \"Bhautik Ashvinbhai Jani\",\n//     text: \"Learning React is Great!\",\n//   },\n// ];\n\nconst AllQuotes = () => {\n  const {\n    sendRequest,\n    data: loadedQuotes,\n    status,\n    error,\n  } = useHttp(getAllQuotes, true);\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return <NoQuotesFound />;\n  }\n\n  return <QuoteList quotes={loadedQuotes} />;\n};\nexport default AllQuotes;\n"],"names":["_jsxs","className","classes","children","_jsx","Link","to","props","text","author","concat","id","quotes","ascending","navigate","useNavigate","location","useLocation","isAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","Fragment","onClick","map","quote","QuoteItem","_useHttp","useHttp","getAllQuotes","sendRequest","loadedQuotes","data","status","error","useEffect","LoadingSpinner","length","QuoteList","NoQuotesFound"],"sourceRoot":""}